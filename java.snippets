global !p
import px
import px.util
import px.langs.java
import px.buffer
import px.cursor
import os.path

from snippets import *
from snippets.java import *
endglobal

snippet fi "" w
for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {
	$0
}
endsnippet

snippet i "if"
if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet ie "if"
if ($1 == null || $1.isEmpty()) {
	${0:${VISUAL}}
}
endsnippet

snippet t "try"
try {
	${1:${VISUAL}}
} catch(${2:Exception} e) {
	${0}
}
endsnippet

snippet r "return"
return $0;
endsnippet

snippet m "import" w
import $1;
endsnippet

snippet @o "Description" w
@Override
endsnippet

context "is_first_line(snip)"
priority 1000
snippet p "" bweA
package `!p snip.rv=guess_package_name_from_file_name()`;

$0
endsnippet

snippet p "" w
System.err.printf("XXXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` $0 \n");
endsnippet

snippet pr "" w
System.err.printf("XXXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0]) + " " +t[1]
` %s \n", ${1});
endsnippet

snippet uc "" w
public class ${1:`!p snip.rv=guess_class_name_from_file_name()`} {
	$0
}
endsnippet

snippet ud "" w
public ${3:void} $1($2) {
	$0
}

endsnippet


snippet td "" w
protected ${3:void} $1($2) {
	$0
}

endsnippet

snippet vd "" w
private ${3:void} $1($2) {
	$0
}

endsnippet

snippet tt "" w
this.`!p snip.rv=t[1]` = ${1};
endsnippet


global !p
def add_private_decl(snip):
	(x, y) = (snip.cursor[0], snip.cursor[1])
	px.langs.java.goto_constructor_setters();

	snip.expand_anon(
		"    this.{var} = {var};\n"
		.replace('{var}', px.langs.java.get_var_name_by_class_name(snip.tabstops[1].current_text)
	), options='m')

	px.langs.java.goto_private_decls();

	snip.expand_anon(
		"  private {type} {var};\n"
		.replace('{type}', snip.tabstops[1].current_text)
		.replace('{var}', px.langs.java.get_var_name_by_class_name(snip.tabstops[1].current_text)
	), options='m', actions={
		'post_jump': "snip.cursor.set("+str(x+1)+", "+str(y)+")"
	})


def get_next_letter(snip):
	cursor = px.cursor.get()
	line_nr = cursor[0]
	column_nr = cursor[1]

	buffer = px.buffer.get()
	line = buffer[line_nr]

	if len(line) > column_nr:
		return line[column_nr]
	else:
		while True:
			line_nr += 1
			if line_nr >= len(buffer):
				return ""
			line = buffer[line_nr].strip()
			if line == "":
				continue
			return line[0]
endglobal

post_jump "if snip.tabstop == 0: add_private_decl(snip)"
context "get_next_letter(snip)"
snippet ci "" w
@ComponentImport $1 `!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])``!p
if snip.context == ")":
	snip.rv=""
else:
	snip.rv=","
`
endsnippet

snippet uv "" w
public $1 ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`};
endsnippet

snippet tv "" w
protected $1 ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`};
endsnippet

snippet vv "" w
private $1 ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`};
endsnippet

snippet vf "" w
private $0;
endsnippet

snippet uf "" w
public $0;
endsnippet

snippet tf "" w
protected $0;
endsnippet

snippet v "" w
$1 ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`}$0
endsnippet

snippet ms "" w
`!p
import random
try:
	_id
except:
	_id = str(random.randint(1, 10000)) + "XXXXXX"
`Instant startedAt`!p snip.rv=_id` = Instant.now();
${VISUAL}
Instant finishedAt`!p snip.rv=_id` = Instant.now();
long timeElapsed`!p snip.rv=_id` = Duration.between(startedAt`!p snip.rv=_id`, finishedAt`!p snip.rv=_id`).toMillis(); // in millis

System.err.printf("XXXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

	snip.rv = filename + ":" + str(cursor[0]) + " " +t[1]`: %s\n", timeElapsed`!p snip.rv=_id`);
endsnippet

snippet n "" w
`!p snip.rv=t[1]` ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`} = new ${1}($0);
endsnippet

snippet k "" w
`!p snip.rv=t[1]` ${2:`!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])`}$0
endsnippet

snippet ur "" w
@`!p
method = "GET"
fn = t[1].lower()
if 'update' in fn or 'edit' in fn:
	method = "UPDATE"
elif 'delete' in fn or 'remove' in fn:
	method = "DELETE"
elif 'new' in fn or 'create' in fn or 'add' in fn:
	method = "POST"

snip.rv = method`
@Path("/{param}")
@Produces({MediaType.APPLICATION_JSON})
@Consumes({MediaType.APPLICATION_JSON})
public Response $1($0) {
}
endsnippet

snippet "(\s+)(\w+)\s+(.*)\s+(.*[^=;])([=].*)?;xml" "" wr
`!p snip.rv=match.group(1)`@XmlElement(name = "`!p snip.rv=px.util.convert_camelcase_to_snakecase(match.group(4))`")
`!p snip.rv=match.group(1)``!p snip.rv=match.group(2)` `!p snip.rv=match.group(3)` `!p snip.rv=match.group(4)`;
endsnippet

snippet uu "" w
public `!p snip.rv=os.path.basename(px.buffer.get().name).replace('.java', '')`($1) {
	//$0
}
endsnippet

snippet s "" w
String $0;
endsnippet

snippet b "" w
boolean $0;
endsnippet

snippet o "" w
${1} `!p snip.rv=px.langs.java.get_var_name_by_class_name(t[1])` = $0;
endsnippet

snippet pp "" w
System.err.printf(
	"XXXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0]) + " " +t[1]
` %s \n",
		org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(
			${1}, org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE));
endsnippet

snippet js "" w
@Consumes({MediaType.APPLICATION_JSON})
@Produces({MediaType.APPLICATION_JSON})
endsnippet

snippet f "" w
for ($2 ${3:`!p
value = t[1];
if value.endswith('s'):
	value = value[:-1]
snip.rv=value
`}: ${1}) {
  $0
}
endsnippet

snippet fm "" w
for (Map.Entry<$2, $3> entry : $1.entrySet()) {
  $0
}
endsnippet

snippet no "" w
new Object[]{${VISUAL}}
endsnippet

snippet ns "" w
new String[]{${1:${VISUAL}}}
endsnippet

snippet tr "" w
$1transaction(() -> {
	${2:${VISUAL}}
});
endsnippet

snippet rtr "" w
return ${1:dao}.transaction(() -> {
	${2:${VISUAL}}
});$0
endsnippet

snippet ex "" w
extends $0
endsnippet

global !p
def add_accessor(snip):
	px.langs.java.goto_const();
	snip.expand_anon("""  String {KEY} = "{KEY}";
""".replace('{KEY}', px.util.convert_camelcase_to_snakecase(snip.tabstops[1].current_text).upper()), options='m', actions={
	'post_jump': "snip.cursor.set("+str(snip.cursor[0]+1)+", "+str(snip.cursor[1])+")"
})

endglobal

post_jump "if snip.tabstop == 0: add_accessor(snip)"
snippet gs "" w
@Accessor(`!p snip.rv=px.util.convert_camelcase_to_snakecase(t[1]).upper()`)
$2 get$1();

@Mutator(`!p snip.rv=px.util.convert_camelcase_to_snakecase(t[1]).upper()`)
`!p
if t[2] == "String":
	snip.rv = "@StringLength(StringLength.UNLIMITED)\n  "
`void set$1($2 value);
endsnippet

snippet l "" w
($1) -> {
	$0
}
endsnippet

snippet ll "" w
($1) -> $0
endsnippet

snippet m "" w
Map<${1:String, String}> $0
endsnippet

snippet gw "" w
`!p
_var_name = px.langs.java.get_var_name_by_class_name(t[1])
`
public `!p snip.rv=t[2]` get`!p snip.rv=t[1]`() {
		return `!p snip.rv=_var_name`;
}

public `!p snip.rv=guess_class_name_from_file_name()` where$1($2 `!p snip.rv=_var_name`) {
		this.`!p snip.rv=_var_name` = `!p snip.rv=_var_name`;
		return this;
}
endsnippet

snippet pa "" w
@PathParam("`!p snip.rv=px.util.convert_camelcase_to_snakecase(t[1])`") ${2:String} $1$0
endsnippet

snippet rt "" w
return this;
endsnippet

snippet a "" w
assertEquals($1, $2);
endsnippet

global !p
def expand_optional(snip):
	visual = snip.context
	if visual == "null":
		snip.expand_anon("Optional.empty()", options='m')
	elif visual.endswith(" == null"):
		snip.expand_anon("!"+visual[:-8]+".isPresent()")
	elif visual.endswith(" != null"):
		snip.expand_anon(""+visual[:-8]+".isPresent()")
	else:
		left = "Optional<"
		right = ">"

		of = False
		if re.search(r'^\s+(return)\s+', px.buffer.get_current_line()):
			of = True
		elif re.search(r'=', px.buffer.get_current_line_before_cursor()):
			of = True

		if of:
			left = "Optional.of("
			right = ")"
		content = left+visual+right
		snip.expand_anon(content, options='m')

	px.langs.java.ensure_import(snip.buffer, 'java.util.Optional')
endglobal

context "snip.visual_text"
post_jump "expand_optional(snip)"
snippet oo "" w
$0
endsnippet

snippet e "" w
else {
	$0
}
endsnippet

snippet su "" w
@SuppressWarnings("${1:serial}")
endsnippet

snippet mm "" w
public static final Msg $1 =  new Msg("${2:`!p
try:
	once
except:
	once = True
	clipboard = vim.eval('getreg("@")')
	if "\n" not in clipboard:
		snip.rv = clipboard.strip('"')
`}");
$0
endsnippet
