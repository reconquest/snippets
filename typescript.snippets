global !p
import px
import re
import px.whitespaces
import px.cursor

def is_typescript():
	if vim.eval('&ft') == 'typescript':
	    return True;

	synstack = vim.eval("synstack(line('.'), col('.'))")
	if len(synstack) == 0:
		return True

	name = vim.eval("synIDattr(" + synstack[-1] + ", 'name')")
	return name.startswith('typescript')

def is_switch_body(snip):
    return px.whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'switch ')
endglobal

context "is_typescript()"
snippet i "if" b
if ($1) {
	$2
}
endsnippet

context "is_typescript()"
snippet s "switch" b
switch ($1) {
	$2
}
endsnippet

context "is_typescript() and is_switch_body(snip)"
snippet c "case" b
case $1:
	$2
	break
endsnippet

context "is_typescript()"
snippet p "console.log" b
console.log("`!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` $0")
endsnippet

context "is_typescript()"
snippet pp "console.log" b
console.log("`!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` `!p snip.rv=t[1]`", $1)
endsnippet

snippet fo "for of" b
for (let $1 of $2) {
	$3
}
endsnippet

context "is_typescript()"
snippet r "return" b
return $0
endsnippet

context "is_typescript()"
snippet rt "return true" b
return true
endsnippet

context "is_typescript()"
snippet rt "return false" b
return false
endsnippet

context "is_typescript()"
snippet .filter "array filter" i
.filter(
	($1) => {
		$0
	}
)
endsnippet

context "is_typescript()"
snippet a "anonymous function" i
($1) => {
	$0
}
endsnippet

context "is_typescript()"
snippet .forEach "array forEach" i
.forEach(
	($1) => {
		$0
	}
)
endsnippet

context "is_typescript()"
snippet .then "promise then" i
.then(
	($1) => {
		$2
	}
)
endsnippet

snippet vue "vue component" b
import Vue from 'vue';

// tslint:disable-next-line: no-default-export
export default Vue.extend({
	$0
})
endsnippet

context "is_typescript()"
snippet "^e" "export" rA
export $0
endsnippet

context "is_typescript()"
snippet "^(\w+ )?in" "export interface" rA
`!p snip.rv = match.group(1) if match.group(1) else ''`interface $1 {
	$0
}
endsnippet

context "is_typescript()"
snippet "^(\w+ )?f" "export function" rA
`!p snip.rv = match.group(1) if match.group(1) else ''`function $1($2): $3 {
	$0
}
endsnippet

context "is_typescript()"
snippet "^(\w+ )?cl" "export class" rA
`!p snip.rv = match.group(1) if match.group(1) else ''`class $1 {
	$2
}
endsnippet

context "is_typescript()"
snippet "^i" "import from" rA
import $1 from '@/$0';
endsnippet

context "is_typescript()"
snippet "import {" "import" Ab
import { $0 }
endsnippet

context "is_typescript()"
snippet m "" w
$1($2) $3 {
	$0
},
endsnippet

context "snip.visual_text"
snippet c "" w
constructor(${1:`!p
params = snip.context
params = params.strip()
params = params.replace(';', '')
params = ', '.join(
	map(lambda x: 'public ' + x.strip(), params.split('\n'))
)
snip.rv = params
`}) {}
endsnippet
