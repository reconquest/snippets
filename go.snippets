###############################################################################
# GLOBALS
###############################################################################
global !p
from snippets import *
from snippets.go import *

def pum_visible():
	return vim.eval('pumvisible()') == '1'

def	pre_expand_():
	px.common.get_active_completer().reset()

def is_inside_brackets(snip):
	line = snip.buffer[snip.line]
	before = line[:snip.column]

	if px.cursor.is_between(line, snip.cursor, '\[', '\]'):
		 return True

	if re.match(r'.*\[[^]]*$', before):
		return True

	return False

def before_equal_sign(snip):
	line = snip.buffer[snip.line]
	if len(line) <= snip.column+1:
		return False

	return line[snip.column+1] == '='

def is_inside_inline_struct_instance(snip):
	part = snip.buffer[snip.cursor[0]][:snip.cursor[1]]

	return '{' in part

def is_inside_if_err(snip):
	return px.whitespaces.match_higher_indent(
		snip.buffer, snip.cursor, 'if err\s+'
	)

def is_inside_struct_instance(snip):
	if is_inside_anon_struct(snip):
		return True

	if is_inside_inline_struct_instance(snip):
		return True

	return px.whitespaces.match_higher_indent(
		snip.buffer, snip.cursor, '[\w.]+{$|[^{]} {$'
	)

def is_inside_anon_struct(snip):
	return px.whitespaces.match_higher_indent(
		snip.buffer, snip.cursor, '}\s*{'
	)

def is_inside_map(snip):
	return px.whitespaces.match_higher_indent(
		snip.buffer, snip.cursor, 'map\S+{$'
	)

def is_inside_case_condition(snip):
	line = snip.buffer[snip.line]
	return re.match('^\s+case ', line)

def is_viable_for_equal_statement(snip):
	return not is_string() and not is_comment() and \
		not is_inside_brackets(snip) and \
		not before_equal_sign(snip) and \
		not is_inside_struct_instance(snip) and \
		not is_inside_inline_struct_instance(snip) and \
		not is_inside_anon_struct(snip) and \
		not is_inside_map(snip) and \
		not is_inside_case_condition(snip)

def insert_space(snip, space=" "):
	line = snip.buffer[snip.line]
	if snip.buffer[snip.line] != snip.context:
		line = snip.context

	snip.buffer[snip.line] = \
		line[:snip.column] + \
		space + \
		line[snip.column:]

	snip.cursor.set(
		snip.line,
		snip.column + len(space),
	)

def is_manually_triggered():
    return vim.eval('get(g:, "_expand_snippet", "0")') == '1'

def get_program_name_from_usage(snip):
	prev_line = snip.buffer[snip.snippet_start[0] - 1]
	return prev_line.strip().split(' ', 1)[0]

def guess_binary_name_from_path():
	return os.path.basename(os.path.realpath('.'))

def add_usage(snip):
	px.langs.go.goto_const();
	snip.expand_anon("""var version = "${2:[manual build]}"

var usage = \`{PROGRAM} - $1

$3

Usage:
  {PROGRAM} -h | --help
  $4

Options:
  -h --help  Show this help.
  $0
`

""".replace('{PROGRAM}', snip.tabstops[1].current_text), options='m')

def fix_matchem(char):
    pass


def get_indent_levels(snip, base_line):
	if snip.context is None:
		snip.context = {}

	if len(snip.buffer) <= base_line+1:
		return

	snip.context['upper_indent'] = px.whitespaces.get_indentation(
		snip.buffer[base_line]
	)[1]

	snip.context['inner_indent'] = px.whitespaces.get_indentation(
		snip.buffer[base_line+1]
	)[1]

	return snip.context

def get_padded_equal_sign(selection=None):
	if not selection:
		cursor = px.cursor.get()
		selection = px.buffer.get()[cursor[0]][:cursor[1]]

	if not selection:
		return "=", ""

	if re.match(r'\w', selection[-1]):
		return " = ", selection
	else:
		return "= ", selection
endglobal

###############################################################################
priority -1
###############################################################################

context "px.snippets.make_context(snip)"
pre_expand "pre_expand_()"
post_jump "jump_to_if_body_on_err_not_nil(snip)"
snippet i "if" bw
if ${1:`!p
try:
	once
except:
	once = True
	snip.rv = get_value_for_if(snip.c, snip.context)
`} {
	$0
}
endsnippet

context "not is_string() and not is_comment() and (is_type_decl(snip) or is_func_decl(snip))"
snippet "(.*)(\w| )([si6fyeb])" "type string int int64 float64 byte error bool" er
`!p

trigger = match.group(3)

typedef = {
	's': 'string',
	'i': 'int',
	'6': 'int64',
	'f': 'float64',
	'y': '[]byte',
	'e': 'error',
	'b': 'bool',
}[trigger]


snip.rv = match.group(1) + (match.group(2).strip() + ' ') + typedef`
endsnippet

context "not is_string() and not is_comment()"
snippet "t" "anon struct" ew
struct {
	$1
}
endsnippet

snippet de "defer" b
defer $1($2)
endsnippet

context "not is_string() and not is_comment() and is_type_decl(snip)"
snippet m "" bwe
$1 map[${2:string}]${3:interface{}}
endsnippet

context "not is_string() and not is_comment() and is_func_decl(snip)"
snippet m "" we
$1 map[${2:string}]${3:interface{}}${4/.+/(?0:, )/}$4
endsnippet

snippet ii "if <VISUAL>" bwA
if ${VISUAL} {
	$1
}
endsnippet

snippet fe "fmt.Errorf($1 or VISUAL)" w
fmt.Errorf(${1:${VISUAL}})
endsnippet

snippet fef "fmt.Errorf with message" w
fmt.Errorf("$1: %s", ${2:${VISUAL:err}})
endsnippet

snippet ff "fmt.Errorf only message" w
fmt.Errorf("$1")
endsnippet

snippet r "return" bw
return $0
endsnippet

snippet "return nil" "return nil, err" bw
return nil, err
endsnippet

snippet ,e ", err" iA
, err$0
endsnippet

context "px.langs.go.is_if_bracket(snip.buffer, snip.line, snip.column-1)"
snippet "}([\w])" "else before closing bracket" bwrA
} else {
	`!p snip.rv=match.group(1)`$1
}
endsnippet

###############################################################################
priority 0
###############################################################################

context "is_if_condition(snip)"
snippet e "" w
${1:${VISUAL}} == "$2"
endsnippet

context "is_if_condition(snip)"
snippet en "" w
${1:${VISUAL}} != "$2"
endsnippet

context "is_if_condition(snip)"
snippet l "" w
len(${1:${VISUAL}}) == ${2:0}
endsnippet

context "is_if_condition(snip)"
snippet ln "" w
len(${1:${VISUAL}}) != ${2:0}
endsnippet

###############################################################################
priority 1
###############################################################################

snippet / "visual not nil" "get_selected_placeholder(snip)" iAe
`!p snip.rv = snip.context` != nil
endsnippet


context "is_inside_if_err(snip)"
snippet pa "panic" b
panic(err)
endsnippet

context "not pum_visible() and not is_string() and not is_comment() and is_viable_for_equal_statement(snip)"
snippet : "colon equals auto" iAe
 :=`!p snip.rv = ' '`
endsnippet

context "not pum_visible() and not is_string() and not is_comment() and is_inside_struct_instance(snip)"
snippet : "colon space auto" iAe
:`!p snip.rv = ' '`
endsnippet

snippet = "" "not is_string() and not is_comment() and {'selection': None}" iAe
`!p snip.rv, snip.context['selection'] = get_padded_equal_sign(snip.context['selection'])`
endsnippet

###############################################################################
priority 2
###############################################################################

snippet e "" wb
err := ``
endsnippet

context "not is_string() and not is_comment()""
snippet = "" wbA
${1:err} := ``
endsnippet


context "is_first_line(snip)"
snippet "package m" "" bwrAe
package main
endsnippet

context "snip.line == 0 and snip.column == 0"
snippet m "" eA
package main

func main() {
	$0
}
endsnippet

context "px.langs.go.is_if_bracket(snip.buffer, snip.line, snip.column-1)"
snippet "}\s" "else before closing bracket" bwrA
} else {
	$1
}
endsnippet

context "not is_string() and not is_comment() and is_before_first_func(snip)"
snippet "^c$" "" bwreA
const (
	$0
)
endsnippet

snippet ass "anon struct with fields" w
struct {
	$1
}{
	$2
}
endsnippet

snippet "((\w+)\s*(\*?[\w\[\].\{\}*]+)(\s+`[^`]+`)?)\s+(to|js|bs|sc|ya|bi|do|xo)$" "annotation" "not px.syntax.is_string(snip.cursor)" bre
`!p

line = match.group(1)

prefixes = {
    "to": "toml",
    "js": "json",
    "bs": "bson",
    "sc": "schema",
    "ya": "yaml",
	"bi": "binding",
	"do": "docopt",
	"xo": "xorm",
}

prefix = prefixes[match.group(5)]

if line.endswith('\`'):
	quote = ' '
	line = line[:-1]
else:
	quote = ' \`'

snip.rv = line + quote + prefix

surround = ""
if prefix == "xorm":
	surround = "'"
`:"`!p snip.rv=surround`${1:`!p snip.rv=px.util.convert_camelcase_to_snakecase(match.group(2))`}`!p snip.rv=surround`"\`
endsnippet

snippet ,o "" i
,omitempty
endsnippet

snippet msi "map[string]interface" w
map[string]interface{}
endsnippet

snippet mss "map[string]string" w
map[string]string
endsnippet

snippet s "switch" bw
switch ${1:name} {
case ${2:true}:
	$3
$4
}
endsnippet

snippet w "switch true" bw
switch {
case ${1}:
	$2
$3
}
endsnippet

snippet se "select" bw
select {
case ${1}:
	$2
$3
}
endsnippet

context "px.snippets.make_context(snip)"
pre_expand "px.common.get_active_completer().reset()"
snippet p "fmt printf xxx debug" bwe
`!p

try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

func = 'Fprintln'
left = '"'
right = ')'

if t[1] != '':
	func = 'Fprintf'
	left = ' ' + t[1] + ': %#v\\n", '
	right = ')'

	if t[1] == 'err':
		left = ' ' + t[1] + ': %s\\n", '

if " " in t[1]:
	func = 'Fprintf'
	left = ' '
	right = '\\n")'

left = " " + filename + ":" + str(cursor[0]) + left

`fmt.`!p snip.rv = func`(os.Stderr, "XXXXXX`!p snip.rv=left`${1}`!p snip.rv=right`
endsnippet

context "px.snippets.make_context(snip)"
pre_expand "px.common.get_active_completer().reset()"
snippet lr "fmt printf xxx debug" bwe
`!p

try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

func = 'Println'
left = '"'
right = ')'

if t[1] != '':
	func = 'Printf'
	left = ' ' + t[1] + ': %#v\\n", '
	right = ')'

	if t[1] == 'err':
		left = ' ' + t[1] + ': %s\\n", '

if " " in t[1]:
	func = 'Println'
	left = ' '
	right = '\\n")'

left = " " + filename + ":" + str(cursor[0]) + left

`log.`!p snip.rv = func`("XXXXXX`!p snip.rv=left`${1}`!p snip.rv=right`
endsnippet

snippet main "func main" bw
func main() {
	$0
}
endsnippet

context "snip.buffer[snip.cursor[0]] == 'v'"
post_jump "px.snippets.expand(snip)"
snippet "^v" "var" bwrA
vr$1
endsnippet

snippet "v" "var" bwr
var $1
endsnippet

snippet "vr" "var" bwr
`!p
vis = ""
if snip.v.text  != "":
	vis = snip.v.text
	vis = re.sub(r' := ', ' = ', vis)
	vis = re.sub(r'var ', '', vis)
	vis = re.sub(r'^', '\t', vis, flags=re.M)
	vis = vis.strip()
`var (
	${1:`!p snip.rv=vis`}
)
endsnippet

snippet rn "return nil" bw
return nil
endsnippet

snippet ap "append" bw
${1:slice} = append($1, $2)
endsnippet

snippet ms "make slice" w
make([]$1, ${2:0})
endsnippet

snippet mc "make chan" w
make(chan $1, ${2:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:interface\{\}})
endsnippet

snippet if "interface" w
interface{}
endsnippet

snippet ts "type switch" bw
switch ${1:newVar} := ${2:checkVar}.(type) {
case ${3:Type}:
	$4
}
endsnippet

snippet "= =" "" "is_if_condition(snip)" Aie
== $0
endsnippet

snippet "= =" "" "not is_if_condition(snip)" Aie
:= $0
endsnippet

snippet "fa?" "false" wr
false
endsnippet

snippet "tr?" "true" bwr
true
endsnippet

###############################################################################
priority 3
###############################################################################

context "not pum_visible() and not is_string() and not is_manually_triggered() and snip.buffer[snip.line]"
post_jump "insert_space(snip)"
snippet , "comma auto" eAi
,X
endsnippet

snippet an "func anonymous" w
func ($1) $2${2/.+/ /}{
	$3
}
endsnippet

snippet "^n" "" "not is_string() and not is_comment()" bweAr
func $1($2) $3`!p snip.rv = (" {" if t[3] != "" else "{") `
	$4
}

endsnippet

snippet "== =" "" Ai
!= $0
endsnippet

snippet "!= =" "" Ai
== $0
endsnippet

snippet ":= =" "" Ai
= $0
endsnippet

snippet "=  " "!= nil" "is_if_condition(snip)" Aer
!= nil$0
endsnippet

snippet "= n" "" "is_if_condition(snip)" Aie
= nil$0
endsnippet

###############################################################################
priority 4
###############################################################################

snippet "== nil[=n]" "" "is_if_condition(snip)" Aier
!= nil$0
endsnippet

snippet "!= nil[=n]" "" "is_if_condition(snip)" Aier
== nil$0
endsnippet


post_jump "if snip.tabstop == 0: add_usage(snip)"
snippet do "docopt" b
args, err := docopt.ParseArgs(usage, nil, "${1:`!p snip.rv = guess_binary_name_from_path()`} " + version)
if err != nil {
	panic(err)
}
endsnippet

snippet - "docopt command declaration" "is_inside_docopt_section(snip, 'usage') and not is_inside_docopt_section(snip, 'options')" beA
`!p snip.rv = get_program_name_from_usage(snip)` -$0
endsnippet

post_jump "if snip.tabstop == 2: docopt_format_options(snip)"
snippet "\s*-" "docopt option declaration" "is_inside_docopt_section(snip, 'options')" beAr
  -$1`!p snip.rv=get_options_indentation(snip)``!p snip.rv=split_long_docopt_line(t, snip)`$2
endsnippet

snippet [ "docopt option default with matchem" "is_inside_docopt_section(snip, 'options')" eA
`!p snip.rv="["`default: $1]
endsnippet

post_expand "fix_matchem('[')"
snippet args[ "args[blah]" wi
args[`!p

if t[1].startswith('-'):
	 if len(t[1]) > 2 and not t[1].startswith('--'):
		snip.rv = '"-'
	 else:
		snip.rv = '"'
else:
	snip.rv = '"<'

`$1`!p

if t[1].startswith('-'):
	snip.rv = '"'
else:
	snip.rv = '>"'

`].(${2:string})$0
endsnippet

# Snippet to call log.Debugf with function args.
# Should be expanded on line before actual function call.
# Function call should be formatted like following pattern:
#
#	 foo := bar(
#		arg1,
#		arg2,
#		arg3,
#	 )
#
# or like this pattern:
#
#	 bar(
#		arg1,
#		arg2,
#		arg3,
#	 )
#
snippet x "log.Debugf args of function on next line"
`!p
def is_next_line_contains_function_call_only(buffer, line):
	return re.match('.*\($', buffer[line + 1])

def get_function_name_from_line(buffer, line):
	matches = re.match('^(\t*|.*=\s)([\w\.]*)\($', buffer[line + 1])
	if matches:
		return matches.group(2)

def get_function_args_count(buffer, line, line_first_arg):
	while line <= len(buffer):
		line += 1
		matches = re.match(r'.*\)$', buffer[line])
		if matches:
			return line - line_first_arg

def run(buffer, line):
	if not is_next_line_contains_function_call_only(buffer, line):
		return

	function_name = get_function_name_from_line(buffer, line)
	line_current_arg = line + 2
	args_count = get_function_args_count(buffer, line, line_current_arg)
	if args_count == 0:
		return

	buffer.append(
		snip.mkline(
			formatLogInfoFunction % (
				os.path.basename(px.buffer.get().name),
				line_current_arg + args_count + 1,
				function_name
			),
		),
		line
	)

	line += 1
	line_current_arg += 1
	line_last_arg = line_current_arg + args_count

	while line_current_arg < line_last_arg:
		arg = buffer[line_current_arg].strip()[:-1] # [:-1] to remove ','

		buffer.append(
			snip.mkline(formatLogInfo % (arg.replace('"', r'\"'), arg)),
			line
		)

		line_current_arg += 2
		line += 1
		line_last_arg += 1

buffer = px.buffer.get()
line, _ = px.cursor.get()

formatLogInfo = 'log.Debugf("\\t%%s: %%#v", "%s", %s); '
formatLogInfoFunction = 'log.Debugf("%s:%s: %%s", "%s()"); '

run(buffer, line)
`
endsnippet

context "snip.buffer[snip.line-1].endswith('[') and snip.buffer[snip.line].strip().startswith(']')"
snippet "" "[\n]" brA
	$0
endsnippet

snippet lu "" w
${1}.Lock()
defer `!p snip.rv=t[1]`.Unlock()
endsnippet

snippet ru "" w
${1}.RLock()
defer `!p snip.rv=t[1]`.RUnlock()
endsnippet

snippet ":\s+" "" wr
$1: $1,
endsnippet

snippet ctx "ctx context.Context" w
ctx context.Context
endsnippet

###############################################################################
priority 5
###############################################################################

context "not is_string() and not is_comment()"
snippet  ", e" "err, " ie
, err``
endsnippet

context "not is_string() and not is_comment()"
snippet  ", n" ", nil" ie
, nil``
endsnippet

context "not is_string() and not is_comment()"
snippet  ",  " "err, " ie
, err``
endsnippet

context "not is_string() and not is_comment()"
snippet  n, "nil, " Ae
nil, ``
endsnippet

context "not is_string() and not is_comment()"
snippet  e, "err, " Ae
err, ``
endsnippet

snippet "return e" "return err" bw
return err
endsnippet

context "get_indent_levels(snip, snip.line)"
post_expand "get_indent_levels(snip, snip.snippet_start[0])"
snippet "return(.*)fm" "return fmt.Errorf" bwr
`!p
quote = '"'

if '"' in t[1]:
    quote = '\`'

`return`!p snip.rv = match.group(1)`fmt.Errorf(
	"$1: %s"`!p

snip.rv = (",\n" + snip.context['inner_indent'] if t[2] else ",")

`$2`!p

snip.rv = ("," if t[2] else "") + " err,\n" + snip.context['upper_indent'] + ")"

`
endsnippet

context "get_indent_levels(snip, snip.line)"
post_expand "get_indent_levels(snip, snip.snippet_start[0])"
snippet "(return)?(.*\W)([kc])" "return karma/context" bwr
`!p
quote = '"'

if '"' in t[1]:
    quote = '\`'

subject = "karma"
if match.group(3) == "c":
	subject = "context"

prefix=match.group(2)
if match.group(1):
    prefix=match.group(1) + prefix

snip.rv=prefix
``!p snip.rv=subject`.Format(
`!p snip.rv=snip.context['upper_indent']`	err,
`!p snip.rv=snip.context['upper_indent']`	`!p snip.rv = quote`$0`!p snip.rv = quote``!p

snip.rv = (",\n" + snip.context['inner_indent'] if t[2] else ",")

``!p

snip.rv = ("," if t[2] else "") + "\n" + snip.context['upper_indent'] + ")"

`
endsnippet

snippet kd "" w
karma.Describe("$1", $2)$0
endsnippet

snippet "(karma\.)$" "describe context" r
`!p snip.rv=match.group(1)`
	Describe("$1", $2).
    $0
endsnippet

snippet "(Describe\(.*\)\.)$" "more describe context" r
`!p snip.rv=match.group(1)`
Describe("$1", $2).$0
endsnippet

snippet "return n" "return nil" bw
return nil
endsnippet

snippet "r (.)" "return auto" bwrA
return `!p snip.rv=match.group(1)`
endsnippet

snippet fr "for true forever" bw
for {
	$1
}
endsnippet

snippet qt "t.fatal" bw
if err != nil {
	t.Fatal(err)
}
endsnippet

snippet tf "t.fatalf" bw
t.Fatalf("$1")
endsnippet

snippet qf "log fatal" bw
if err != nil {
	log.Fatal(err)
}
endsnippet

snippet qff "log fatalf" bw
if err != nil {
	log.Fatalf(\`$1: %s\`, $2, err)
}
endsnippet

snippet rt "return true" bw
return true
endsnippet

snippet rf "return false" bw
return false
endsnippet

context "not is_string() and not is_comment() and px.langs.go.extract_prev_method_binding(snip.buffer, snip.cursor) and {'line': snip.line}"
snippet "^d$" "" bweAr
`!p

try:
	once
except:
	once = True
	prev_binding = px.langs.go.extract_prev_method_binding(
		px.buffer.get(), px.cursor.get()
	)

	if not prev_binding:
		binding = ''
	else:
		name, binding_type = prev_binding
		binding = name + ' *' + str(binding_type)

`
func (`!p snip.rv=binding`) $1($2) $3 {
	$4
}
endsnippet

snippet re "return errors.New" bw
return errors.New($1)
endsnippet

snippet en "" w
errors.New("$0")
endsnippet

snippet "(func\s.*\)\s+)([\w\d_\s\{\}\[\]\*\.]+),\s?([\w\d_\s\{\}\[\]\*\.]+)" "add commas around multple return variables" rA
`!p snip.rv=match.group(1)`(`!p snip.rv=match.group(2)`, `!p snip.rv=match.group(3)`$0)
endsnippet

snippet "^\)\s+?([\w\d_\s\{\}\[\]\*\.]+),\s+?([\w\d_\s\{\}\[\]\*\.]+)" "return multipleadd commas around multple return variables" rA
) (`!p snip.rv=match.group(1)`, `!p snip.rv=match.group(2)`$0)
endsnippet

snippet jp "print json" bw
{
	marshaledXXX, _ := json.MarshalIndent($1, "", "  ")
	fmt.Printf("`!p snip.rv=t[1]`: %s\n", string(marshaledXXX))
}
endsnippet

snippet "^e" "func Test" wrA
func Test$1(t *testing.T) {
	test := assert.New(t)

	$2
}
endsnippet

snippet "^b" "func Bench" wrA
func Benchmark$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$2
	}
}
endsnippet

context "not is_string() and not is_comment() and px.langs.go.is_return_argument(snip.buffer, snip.line, snip.column)"
snippet ", ?" "return ... , nil" ier
, `!p if px.langs.go.is_in_err_condition(px.buffer.get(), px.cursor.get()[0], px.cursor.get()[1]):
	snip.rv = "err"
else:
	snip.rv = "nil"`
endsnippet

snippet ef "fmt.Errorf" w
fmt.Errorf("$1", $2)
endsnippet

snippet tx "this instance" w
`!p
buffer = px.buffer.get()
line, column = px.cursor.get()

result = 't'
while True:
	line = line - 1
	if line == 0:
		break

	line_contents = buffer[line]
	matches = re.match(r'(?m)^func \(([^)]+)\s+([^)]+)\) ', line_contents)
	if not matches:
		continue

	result = matches.group(1)
	break


snip.rv=result`
endsnippet

context "should_expand_amp(snip)"
snippet & "expand amp" Awe
&& $0
endsnippet


snippet ", ," "underscore auto" iAr
, _
endsnippet

context "snip.buffer[snip.cursor[0]] == 't'"
snippet "^t" "not is_string() and not is_comment()" wAre
type ${1:`!p snip.rv=snip.v.text.replace("type ", "\t")`} ${2:string}
endsnippet

snippet err.E "err.Error()" wA
err.Error()
endsnippet

context "not is_string() and not is_comment()"
snippet "^o$" "new" reA
`!p

bindings = px.langs.go.extract_prev_method_binding(
    px.buffer.get(),
    px.cursor.get()
)
if not bindings:
    type = 'someStruct'
else:
    type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($1) `!p snip.rv = type` {
	$2
}
endsnippet

context "not is_string() and not is_comment()"
snippet "^p$" "new" reA
`!p

bindings = px.langs.go.extract_prev_method_binding(
    px.buffer.get(), px.cursor.get()
)
if not bindings:
    type = 'someStruct'
else:
    type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($1) *`!p snip.rv = type` {
	$2
}
endsnippet

snippet f "for range" bw
for ${2:_}, ${3} := range ${1:`!p snip.rv=get_value_for_for(snip.c)`} {
	${4:${VISUAL}}
}
endsnippet

snippet fi "for i" bw
for ${1:i} := 0; $1 < $2; $1++ {
	${0:${VISUAL}}
}
endsnippet

###############################################################################
priority 10
###############################################################################

context "not is_string() and not is_comment() and should_expand_case(snip.buffer, snip.line)"
snippet c "switch case" bweA
case $1:
	$2
$3
endsnippet

context "not is_string() and not is_comment() and should_expand_case(snip.buffer, snip.line)"
snippet d "switch default" bweA
default:
	$1
endsnippet

context "not is_string() and not is_comment() and should_expand_fallthrough(snip.buffer, snip.line)"
snippet f "switch fallthrough" bwe
fallthrough
endsnippet

context "not is_string() and not is_comment()"
snippet "^s$" "type struct or interface | use t for types" bwreA
`!p
type_left = "struct"
if re.match("^\w+\(", t[2]):
	type_left = "interface"
`type $1 `!p snip.rv=type_left` {
	$2
}
endsnippet

snippet "^\s*type\s+(\w+)\s+([\w.]+)" "type struct embed" br
type `!p snip.rv = match.group(1)` struct {
	`!p snip.rv = match.group(2)`$1
}
endsnippet

context "not is_string() and not is_comment() and px.langs.go.gocode_can_complete()"
pre_expand "gocode_complete_function(snip)"
snippet "(\w+\.\w+)" "" re
endsnippet

snippet = "visual equals" "get_selected_placeholder(snip)" iAe
`!p snip.rv = snip.context``!p snip.rv, _ = get_padded_equal_sign(snip.context)`
endsnippet

snippet ( "visual paren" "get_selected_placeholder(snip)" iAe
$1(`!p snip.rv = snip.context`)
endsnippet

snippet ! "visual exclam" "get_selected_placeholder(snip)" iAe
!`!p snip.rv = snip.context`
endsnippet

snippet . "visual period dot" "get_selected_placeholder(snip)" iAe
`!p snip.rv = snip.context`.
endsnippet

###############################################################################
priority 1000
###############################################################################

context "is_first_line(snip)"
snippet p "" bweA
package ${1:`!p snip.rv=guess_package_from_file_name()`}

$0
endsnippet

context "is_for_body(snip)""
snippet c "continue in if" eb
continue
endsnippet

###############################################################################
priority 99999
###############################################################################

snippet "\.f" "run karma.Format on that var" rw
.Format(${1:err}, "$0")
endsnippet


snippet ge "" w
`!p

try:
	once
except:
	once = True
	prev_binding = px.langs.go.extract_prev_method_binding(
		px.buffer.get(), px.cursor.get()
	)

	if not prev_binding:
		binding = ''
	else:
		name, binding_type = prev_binding
		binding = str(binding_type)

`//go:generate gonstructor --type=`!p snip.rv=binding` $0
endsnippet
